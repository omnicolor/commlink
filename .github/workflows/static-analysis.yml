name: PHP Static Analysis

on: pull_request

jobs:
  lint:
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        php-version:
          - "8.2"
    steps:
      - name: Checkout repository
        uses: "actions/checkout@v4"

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@master
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          extensions: "json, mbstring, mongodb, pdo"

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --no-interaction

      - name: Check syntax (php-parallel-lint)
        run: vendor/bin/parallel-lint app config data tests

  PHPStan:
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        php-version:
          - "8.2"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@master
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          extensions: "json, mbstring, mongodb, pdo"

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --no-interaction

      - name: Run PHPStan analysis
        run: vendor/bin/phpstan analyze

  Psalm:
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        php-version:
          - "8.2"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@master
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          extensions: "json, mbstring, mongodb, pdo"

      - name: Install Composer dependencies
        run: composer install --no-progress --no-interaction

      - name: Psalm
        run: vendor/bin/psalm

  PHPCodeSniffer:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install PHP_CodeSniffer
        run: curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar

      - uses: Novusvetus/action-php_codesniffer@1.2.14
        with:
          files: "**.php"
          scan_all: true
          phpcs_path: php phpcs.phar
          standard: phpcs.xml
